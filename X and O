package ui;

import javax.swing.*;
import java.awt.*;

public class XandO extends JFrame {
    public XandO() {
        setTitle("Welcome to Tic Tac Toe");
        setSize(600, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        JLabel background = new JLabel(new ImageIcon(getClass().getResource("/image.png")));
        background.setLayout(new BorderLayout());

        JPanel overlay = new OverlayPanel();

        JLabel title = new JLabel("WELCOME TO TIC TAC TOE");
        title.setFont(new Font("Arial Black", Font.BOLD, 28));
        title.setForeground(Color.WHITE);
        title.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel subtitle = new JLabel("First to 3 Rounds Wins!");
        subtitle.setFont(new Font("Arial", Font.BOLD, 20));
        subtitle.setForeground(Color.LIGHT_GRAY);
        subtitle.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton startButton = new GlowButton("PLAY", new Color(0, 120, 220));
        startButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        startButton.setPreferredSize(new Dimension(120, 40));
        startButton.setMaximumSize(new Dimension(120, 40));
        startButton.setFont(new Font("Arial Black", Font.BOLD, 16));
        startButton.addActionListener(e -> {
            new PlayerSetupPage();
            dispose();
        });

        overlay.add(Box.createVerticalStrut(100));
        overlay.add(title);
        overlay.add(Box.createVerticalStrut(20));
        overlay.add(subtitle);
        overlay.add(Box.createVerticalStrut(40));
        overlay.add(startButton);

        background.add(overlay);
        setContentPane(background);
        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(XandO::new);
    }
}
public class GlowButton extends JButton {
    public GlowButton(String text, Color baseColor) {
        super(text);
        setFont(new Font("Arial Black", Font.BOLD, 16));
        setForeground(Color.WHITE);
        setContentAreaFilled(false);
        setFocusPainted(false);
        setBorder(BorderFactory.createLineBorder(baseColor, 2));
        setCursor(new Cursor(Cursor.HAND_CURSOR));

        addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                setBorder(BorderFactory.createLineBorder(baseColor.brighter(), 3));
            }
            public void mouseExited(MouseEvent evt) {
                setBorder(BorderFactory.createLineBorder(baseColor, 2));
            }
        });
    }
}
class PlayerSetupPage extends JFrame {
    public PlayerSetupPage() {
        setTitle("Player Setup");
        setSize(600, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JLabel background = new JLabel(new ImageIcon(getClass().getResource("/image.png")));
        background.setLayout(new BorderLayout());

        JPanel overlay = new JPanel() {
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(new Color(0, 0, 0, 150));
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        overlay.setOpaque(false);
        overlay.setLayout(new GridLayout(4, 1));

        JPanel p1 = buildPlayerPanel("Player 1 Name:", Color.CYAN);
        JPanel p2 = buildPlayerPanel("Player 2 Name:", Color.RED);

        JButton startGame = new GlowButton("START", new Color(0, 180, 120));
        startGame.setFont(new Font("Arial Black", Font.BOLD, 14));
        startGame.setPreferredSize(new Dimension(100, 35));
        startGame.setMaximumSize(new Dimension(100, 35));
        startGame.setAlignmentX(Component.CENTER_ALIGNMENT);
        startGame.addActionListener(e -> {
            String p1name = ((JTextField) ((JPanel) p1).getComponent(1)).getText().trim();
            String p2name = ((JTextField) ((JPanel) p2).getComponent(1)).getText().trim();
            if (p1name.isEmpty() || p2name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "üö´ Please enter both player names.", "Missing Info", JOptionPane.WARNING_MESSAGE);
            } else {
                new GameBoard(p1name, p2name, Color.RED, Color.CYAN);
                dispose();
            }
        });

        overlay.add(p1);
        overlay.add(p2);
        overlay.add(new JLabel(" "));
        overlay.add(startGame);

        background.add(overlay);
        setContentPane(background);
        setVisible(true);
    }
/  GameBoard
public class GameBoard extends JFrame {
    private String[] board = new String[9];
    private int p1Score = 0, p2Score = 0, rounds = 0;
    private boolean isXTurn = true;
    private String p1, p2;
    private Color xColor, oColor;
    private JLabel scoreLabel;
    private List<Integer> winningCombo = new ArrayList<>();

    public GameBoard(String p1, String p2, Color xColor, Color oColor) {
        this.p1 = p1;
        this.p2 = p2;
        this.xColor = xColor;
        this.oColor = oColor;

        setTitle("Tic Tac Toe");
        setSize(600, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        scoreLabel = new JLabel(scoreText(), SwingConstants.CENTER);
        scoreLabel.setFont(new Font("Arial Black", Font.BOLD, 18));
        scoreLabel.setForeground(Color.WHITE);
        scoreLabel.setOpaque(true);
        scoreLabel.setBackground(new Color(0, 0, 0, 180));

        add(scoreLabel, BorderLayout.NORTH);
        add(new BoardPanel(), BorderLayout.CENTER);
        getContentPane().setBackground(Color.BLACK);
        setVisible(true);
    }

    private class BoardPanel extends JPanel {
        public BoardPanel() {
            setBackground(Color.BLACK);
            addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    int cell = getWidth() / 3;
                    int r = e.getY() / cell, c = e.getX() / cell;
                    int idx = r * 3 + c;
                    if (board[idx] == null && winningCombo.isEmpty()) {
                        board[idx] = isXTurn ? "X" : "O";
                        if (checkWin()) {
                            if (isXTurn) p1Score++; else p2Score++;
                            repaint();
                            new Timer(800, ev -> {
                                showMessage((isXTurn ? p1 : p2) + " wins!");
                                nextRound();
                            }).start();
                        } else if (isDraw()) {
                            showMessage("It's a draw!");
                            nextRound();
                        } else {
                            isXTurn = !isXTurn;
                        }
                        scoreLabel.setText(scoreText());
                        repaint();
                    }
                }
            });
        }

        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            int c = getWidth() / 3;

            g2.setColor(Color.CYAN);
            for (int i = 1; i < 3; i++) {
                for (int glow = 8; glow > 0; glow -= 2) {
                    g2.setStroke(new BasicStroke(glow));
                    g2.drawLine(i * c, 0, i * c, getHeight());
                    g2.drawLine(0, i * c, getWidth(), i * c);
                }
            }

            g2.setFont(new Font("Arial Black", Font.BOLD, c / 2));
            for (int i = 0; i < 9; i++) {
                if (board[i] == null) continue;
                int x = (i % 3) * c;
                int y = (i / 3) * c;

                Color color = board[i].equals("X") ? xColor : oColor;
                g2.setColor(winningCombo.contains(i) ? Color.GREEN : color);

                for (int glow = 6; glow > 0; glow -= 2) {
                    g2.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 50));
                    g2.drawString(board[i], x + c / 4, y + 3 * c / 4);
                }

                g2.setColor(winningCombo.contains(i) ? Color.GREEN : color);
                g2.drawString(board[i], x + c / 4, y + 3 * c / 4);
            }
        }
    }

    private void nextRound() {
        rounds++;
        if (rounds >= 3) declareWinner();
        else {
            board = new String[9];
            winningCombo.clear();
            repaint();
        }
    }

    private boolean checkWin() {
        int[][] combos = {{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{0,4,8},{2,4,6}};
        for (int[] c : combos) {
            if (board[c[0]] != null && board[c[0]].equals(board[c[1]]) && board[c[1]].equals(board[c[2]])) {
                winningCombo.clear();
                for (int i : c) winningCombo.add(i);
                return true;
            }
        }
        return false;
    }

    private boolean isDraw() {
        for (String s : board) if (s == null) return false;
        return true;
    }

    private void declareWinner() {
        String msg = p1Score > p2Score ? p1 : p2Score > p1Score ? p2 : "It's a tie!";
        int opt = JOptionPane.showOptionDialog(this, "üèÅ " + msg + " wins!\nPlay again?", "Game Over",
                JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
                null, new String[]{"üîÅ Restart", "‚ùå Exit"}, "üîÅ Restart");

        if (opt == JOptionPane.YES_OPTION) {
            p1Score = p2Score = rounds = 0;
            board = new String[9];
            winningCombo.clear();
            scoreLabel.setText(scoreText());
            repaint();
        } else {
            System.exit(0);
        }
    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Round Over", JOptionPane.INFORMATION_MESSAGE);
    }

    private String scoreText() {
        return p1 + ": " + p1Score + " | " + p2 + ": " + p2Score + " | Round: " + (rounds + 1) + " of 3";
    }
}
